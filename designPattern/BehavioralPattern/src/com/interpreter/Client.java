package com.interpreter;

/**
 * 解释器模式(Interpreter Pattern):
 *      1)在编译原理中,一个算术表达式通过词法分析器形成词法单元,
 *      而后这些词法单元再通过语法分析器构建语法分析树,
 *      最终形成一颗抽象的语法分析树。
 *      这里的词法分析器和语法分析器都可以看做是解释器,
 *      2)解释器模式是指给定一个语言(表达式),
 *      定义它的文法的一种表示,并定义一个解释器,
 *      使用该解释器来解释语言中的句子(表达式)
 *      3)应用场景应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树,
 *      一些重复出现的问题可以用一种简单的语言来表达一个简单语法需要解释的场景
 *      4)这样的例子还有,比如编译器、运算表达式计算、正则表达式、机器人等
 *
 *      解释器模式的角色及职责
 *      Context:是环境角色,含有解释器之外的全局信息.
 *      AbstractExpression:抽象表达式, 声明一个抽象的解释操作,
 *      这个方法为抽象语法树中所有的节点所共享
 *      TerminalExpression:为终结符表达式,实现与文法中的终结符相关的解释操作
 *      NonTerminalExpression:为非终结符表达式,为文法中的非终结符实现解释操作
 */
public class Client {}
